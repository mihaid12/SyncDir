
/*
* SPDX-FileCopyrightText: Copyright Â© 2022 Mihai-Ioan Popescu <mihai.popescu.d12@gmail.com>
*
* SPDX-License-Identifier: Apache-2.0
*/


#ifndef _SYNCDIR_CLT_FILE_INFO_PROC_H_
#define _SYNCDIR_CLT_FILE_INFO_PROC_H_
/*++
Header for the source files related to file information management: APIs for managing SyncDir event log structures (FILE_INFO structures).
--*/



#include "syncdir_clt_def_types.h"



extern "C" QWORD gWatchesArrayCapacity;



//
// Interfaces:
//


//
// ProcessOperationAndAggregate: From syncdir_clt_events.h.
//
extern                                                                  // Usage of "extern" just for clarity.
SDSTATUS
ProcessOperationAndAggregate(
    __in OP_TYPE                    OperationType,
    __in_opt struct inotify_event   *Event,
    __in_opt PEVENT_DATA            DataOfEvent,   
    __inout DIR_WATCH               **Watches,
    __inout DWORD                   *NumberOfWatches,
    __in __int32                    HInotify,
    __inout unordered_map<std::string, FILE_INFO> &FileInfoHMap    
    );


//
// DeleteAllFileInfosForDir
//
SDSTATUS
DeleteAllFileInfosForDir(
    __in char *DirRelativePath,
    __inout std::unordered_map<std::string, FILE_INFO> & FileInfoHMap
    );
/*++
Description: 
    The routine deletes from FileInfoHMap all the FILE_INFO structures of the files inside the directory DirRelativePath, but
    excluding the FileInfo of the DirRelativePath itself (i.e. whose relative paths match exactly).
Arguments:
    - DirRelativePath: Pointer to the relative path of the directory.
    - FileInfoHMap: Reference to the hash map containing the FILE_INFO structures generated by file events.
Return value: 
    STATUS_SUCCESS upon success, STATUS_FAIL otherwise.
--*/



//
// InitFileInfo
//
SDSTATUS
InitFileInfo(
    __out FILE_INFO *FileInfo
    );
/*++
Description: 
    The routine initializes with neutral (default) values all the fields of a FILE_INFO structure.
Arguments:
    - FileInfo: Pointer to the structure containing the file information to be initialized.
Return value: 
    STATUS_SUCCESS on success, STATUS_FAIL otherwise.
--*/



//
// InsertNewFileInfo
//
SDSTATUS
InsertNewFileInfo(
    __in PFILE_INFO NewFileInfo,
    __inout std::unordered_map<std::string, FILE_INFO> &FileInfoHMap
    );
/*++
Description: 
    The routine inserts in the hash map FileInfoHMap the file information pointed by NewFileInfo. The key of the NewFileInfo in
    the hash map is represented by the RelativePath field (NewFileInfo->RelativePath).
Arguments:
    - NewFileInfo: Pointer to the file information structure.
    - FileInfoHMap: Reference to the hash map containing the FILE_INFO structures.
Return value: 
    STATUS_SUCCESS on success, STATUS_FAIL otherwise.
--*/



//
// SetMovementCookiesForDirMovedFrom
//
SDSTATUS
SetMovementCookiesForDirMovedFrom(
    __in DWORD  DirCookie,
    __in char   *DirRelativePath,
    __inout std::unordered_map<std::string, FILE_INFO> & FileInfoHMap
    );
/*++
Description: 
    The routine sets a "move indicator / cookie" value for all the FileInfo's that contain a given path. Concretely, the routine
    sets the DirCookie value for the FILE_INFO.MovementCookie field of all the FileInfo's whose relative path contain the 
    directory DirRelativePath. The FileInfo's are contained by the hash map FileInfoHMap. This routine is required in case a whole 
    directory was part of a MOVED_FROM/MOVE operation.
Arguments:
    - DirCookie: Integer representing the movement cookie value that indicates the move operation.
    - DirRelativePath: Pointer to the relative path of the directory.
    - FileInfoHMap: Reference of the hash map containing the FILE_INFO's of the file events. 
Return value: 
    STATUS_SUCCESS, upon success, STATUS_FAIL otherwise.
Note: 
    A 0 (zero) value for the movement cookie of an inotify_event structure (inotify_event.cookie field) is considered to not be used 
    by the kernel API of Inotify in practice (even though the documentation does not state anything in this sense). Hence, we consider "0"
    to be an unused value for the inotify_event.cookie field, and therefore we use it as guard value throughout the SyncDir application.
--*/



//
// FindFileInfoByMovementCookie
//
SDSTATUS
FindFileInfoByMovementCookie(
    __in DWORD          CookieToFind,
    __out PFILE_INFO    *FileInfoFound,
    __in std::unordered_map<std::string, FILE_INFO> & FileInfoHMap    
    );
/*++
Description: 
    The routine searches for a FileInfo whose MovementCookie field equals a given value. Concretely, the routine finds the FILE_INFO
    structure inside the FileInfoHMap hash map which has the movement cookie equal to CookieToFind. The result is stored at FileInfoFound.
Arguments:
    - CookieToFind: Integer (movement cookie) identifying a move operation of a file.
    - FileInfoFound: Pointer to where the address of the resulted FileInfo is stored, if one is found by the routine, or NULL otherwise.
        The caller provides the storage space.
    - FileInfoHMap: Reference to the hash map containing the FILE_INFO structures generated by file events.
Return value: 
    STATUS_SUCCESS on success, STATUS_FAIL otherwise.
--*/



//
// UpdateFileInfoPath
//
SDSTATUS
UpdateFileInfoPath(
    __inout FILE_INFO       *FileInfoToUpdate,
    __in PDIR_WATCH_NODE    NewWatchNodeOfParent,
    __in char               *NewFileName,
    __in char               *NewFileRelativePath,
    __inout DIR_WATCH       *Watches,
    __inout DWORD           *NumberOfWatches,
    __in __int32            HInotify,
    __inout std::unordered_map<std::string, FILE_INFO> & FileInfoHMap
    );
/*++
Description: 
    The routine updates the path fields of a given FileInfo, also performing necessary modifications related to the path update.
    Concretely, the routine updates the FileInfoToUpdate structure with new values: NewWatchNodeOfParent, NewFileName, NewFileRealtivePath. 
    The old values are stored in the same FileInfo structure. The path update may generate additional necessary modifications, for which 
    Watches, NumberOfWatches, HInotify and FileInfoHMap are needed.
Arguments:
    - FileInfoToUpdate: Pointer to the FileInfo whose path fields are updated by the routine.
    - NewWatchNodeOfParent: Pointer to the address of the watch node representing the new parent directory of the file 
    - NewFileName: Pointer to the string containing the new file name. 
    - NewFileRelativePath: Pointer to the string containing the new relative path of the file.
    - Watches: Pointer to the array of directory watches.
    - NumberOfWatches: Pointer to the size of the Watches array.
    - HInotify: Descriptor of the Inotify instance containing the Inotify watches of the monitored directories.
    - FileInfoHMap: Reference to the hash map of FILE_INFO structures generated by file events.
Return value: 
    STATUS_SUCCESS on success, STATUS_FAIL otherwise. STATUS_WARNING could be returned if the main purpose of the routine
    was achieved, but related issues were encountered (information is logged, thereby).
--*/







#endif //--> #ifndef _SYNCDIR_CLT_FILE_INFO_PROC_H_

